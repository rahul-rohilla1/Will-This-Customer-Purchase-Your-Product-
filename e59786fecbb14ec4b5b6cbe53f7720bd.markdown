---
jupyter:
  editor: DataLab
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
  language_info:
    codemirror_mode:
      name: ipython
      version: 3
    file_extension: .py
    mimetype: text/x-python
    name: python
    nbconvert_exporter: python
    pygments_lexer: ipython3
    version: 3.8.10
  nbformat: 4
  nbformat_minor: 5
---

::: {#67065ba3-366a-4275-ba63-22c0e066d136 .cell .markdown}
`<img src="rupixen-Q59HmzK38eQ-unsplash.jpg" alt="Someone is trying to purchase a produce online" width="500"/>`{=html}
:::

::: {#fe2cbf96-ad4d-4165-8981-1b301108f5bc .cell .markdown collapsed="false" jupyter="{\"outputs_hidden\":false,\"source_hidden\":false}"}
Online shopping decisions rely on how consumers engage with online store
content. You work for a new startup company that has just launched a new
online shopping website. The marketing team asks you, a new data
scientist, to review a dataset of online shoppers\' purchasing
intentions gathered over the last year. Specifically, the team wants you
to generate some insights into customer browsing behaviors in November
and December, the busiest months for shoppers. You have decided to
identify two groups of customers: those with a low purchase rate and
returning customers. After identifying these groups, you want to
determine the probability that any of these customers will make a
purchase in a new marketing campaign to help gauge potential success for
next year\'s sales.

### Data description:

You are given an `online_shopping_session_data.csv` that contains
several columns about each shopping session. Each shopping session
corresponded to a single user.

  -----------------------------------------------------------------------
  Column                        Description
  ----------------------------- -----------------------------------------
  `SessionID`                   unique session ID

  `Administrative`              number of pages visited related to the
                                customer account

  `Administrative_Duration`     total amount of time spent (in seconds)
                                on administrative pages

  `Informational`               number of pages visited related to the
                                website and the company

  `Informational_Duration`      total amount of time spent (in seconds)
                                on informational pages

  `ProductRelated`              number of pages visited related to
                                available products

  `ProductRelated_Duration`     total amount of time spent (in seconds)
                                on product-related pages

  `BounceRates`                 average bounce rate of pages visited by
                                the customer

  `ExitRates`                   average exit rate of pages visited by the
                                customer

  `PageValues`                  average page value of pages visited by
                                the customer

  `SpecialDay`                  closeness of the site visiting time to a
                                specific special day

  `Weekend`                     indicator whether the session is on a
                                weekend

  `Month`                       month of the session date

  `CustomerType`                customer type

  `Purchase`                    class label whether the customer make a
                                purchase
  -----------------------------------------------------------------------
:::

::: {#b841fb9f-4e70-4796-9f35-7c6bbba3cca2 .cell .code execution_count="7" executionCancelledAt="null" executionTime="null" lastExecutedAt="null" lastExecutedByKernel="null" lastScheduledRunId="null" lastSuccessfullyExecutedCode="null" outputsMetadata="{\"0\":{\"height\":190,\"type\":\"dataFrame\"}}"}
``` python
# Import required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

# Load and view your data
shopping_data = pd.read_csv("online_shopping_session_data.csv")
shopping_data.head()
```

::: {.output .execute_result execution_count="7"}
``` json
{"table":{"data":{"Administrative":[0,0,0,0,0],"Administrative_Duration":[0,0,0,0,0],"BounceRates":[0.2,0,0.2,5.0e-2,2.0e-2],"CustomerType":["Returning_Customer","Returning_Customer","Returning_Customer","Returning_Customer","Returning_Customer"],"ExitRates":[0.2,0.1,0.2,0.14,5.0e-2],"Informational":[0,0,0,0,0],"Informational_Duration":[0,0,0,0,0],"Month":["Feb","Feb","Feb","Feb","Feb"],"PageValues":[0,0,0,0,0],"ProductRelated":[1,2,1,2,10],"ProductRelated_Duration":[0,64,0,2.666666667,627.5],"Purchase":[0,0,0,0,0],"SessionID":[1,2,3,4,5],"SpecialDay":[0,0,0,0,0],"Weekend":[false,false,false,false,true],"index":[0,1,2,3,4]},"schema":{"fields":[{"name":"index","type":"integer"},{"name":"SessionID","type":"integer"},{"name":"Administrative","type":"integer"},{"name":"Administrative_Duration","type":"number"},{"name":"Informational","type":"integer"},{"name":"Informational_Duration","type":"number"},{"name":"ProductRelated","type":"integer"},{"name":"ProductRelated_Duration","type":"number"},{"name":"BounceRates","type":"number"},{"name":"ExitRates","type":"number"},{"name":"PageValues","type":"number"},{"name":"SpecialDay","type":"number"},{"name":"Weekend","type":"boolean"},{"name":"Month","type":"string"},{"name":"CustomerType","type":"string"},{"name":"Purchase","type":"number"}],"pandas_version":"1.4.0","primaryKey":["index"]}},"total_rows":5,"truncation_type":null}
```
:::
:::

::: {#2fd7809b-b635-4db1-9d56-29391ff1cb00 .cell .code execution_count="8" executionCancelledAt="null" executionTime="null" lastExecutedAt="null" lastExecutedByKernel="null" lastScheduledRunId="null" lastSuccessfullyExecutedCode="null" outputsMetadata="{\"0\":{\"height\":89,\"type\":\"dataFrame\"}}"}
``` python
# Subset the data to include only November (Nov) and December (Dec) shopping sessions
filtered_data = shopping_data[shopping_data['Month'].isin(['Nov', 'Dec'])]

# Group the data by customer type and calculate total sessions and purchases
customer_stats = filtered_data.groupby('CustomerType').agg(
    Total_Sessions=('SessionID', 'count'),
    Total_Purchases=('Purchase', 'sum')
)

# Calculate purchase rates by customer type
customer_stats['Purchase_Rate'] = customer_stats['Total_Purchases'] / customer_stats['Total_Sessions']
customer_stats
```

::: {.output .execute_result execution_count="8"}
``` json
{"table":{"data":{"CustomerType":["New_Customer","Returning_Customer"],"Purchase_Rate":[0.2733516484,0.1955937668],"Total_Purchases":[199,728],"Total_Sessions":[728,3722]},"schema":{"fields":[{"name":"CustomerType","type":"string"},{"name":"Total_Sessions","type":"integer"},{"name":"Total_Purchases","type":"number"},{"name":"Purchase_Rate","type":"number"}],"pandas_version":"1.4.0","primaryKey":["CustomerType"]}},"total_rows":2,"truncation_type":null}
```
:::
:::

::: {#f762122a-87cc-40a8-84ec-815a7c58269b .cell .code execution_count="9" executionCancelledAt="null" executionTime="48" lastExecutedAt="1726297884381" lastExecutedByKernel="9f6b6048-0dda-4343-b1c8-b9c92041cc74" lastScheduledRunId="null" lastSuccessfullyExecutedCode="# Store the calculated purchase rates in the desired dictionary format
purchase_rates = {
    \"Returning_Customer\": round(customer_stats.loc['Returning_Customer', 'Purchase_Rate'], 3),
    \"New_Customer\": round(customer_stats.loc['New_Customer', 'Purchase_Rate'], 3)
}

purchase_rates
"}
``` python
# Store the calculated purchase rates in the desired dictionary format
purchase_rates = {
    "Returning_Customer": round(customer_stats.loc['Returning_Customer', 'Purchase_Rate'], 3),
    "New_Customer": round(customer_stats.loc['New_Customer', 'Purchase_Rate'], 3)
}

purchase_rates
```

::: {.output .execute_result execution_count="9"}
    {'Returning_Customer': 0.196, 'New_Customer': 0.273}
:::
:::

::: {#80659451-3387-49de-8290-1aa459f39fed .cell .code execution_count="10" executionCancelledAt="null" executionTime="51" lastExecutedAt="1726297884432" lastExecutedByKernel="9f6b6048-0dda-4343-b1c8-b9c92041cc74" lastScheduledRunId="null" lastSuccessfullyExecutedCode="

# Filter data for returning customers in November and December and select relevant duration variables
returning_customers_data = filtered_data[filtered_data['CustomerType'] == 'Returning_Customer']
duration_columns = ['Administrative_Duration', 'Informational_Duration', 'ProductRelated_Duration']

# Compute the correlation matrix for the duration variables
correlation_matrix = returning_customers_data[duration_columns].corr()

# Remove self-correlations and find the strongest correlation between different variables
correlation_matrix_no_self = correlation_matrix.where(~np.eye(correlation_matrix.shape[0], dtype=bool))
strongest_non_self_pair = correlation_matrix_no_self.abs().unstack().sort_values(ascending=False).drop_duplicates().idxmax()

# Updated result in the desired dictionary format
top_correlation = {
    \"pair\": strongest_non_self_pair,
    \"correlation\": round(correlation_matrix_no_self.unstack()[strongest_non_self_pair], 3)
}
top_correlation

"}
``` python


# Filter data for returning customers in November and December and select relevant duration variables
returning_customers_data = filtered_data[filtered_data['CustomerType'] == 'Returning_Customer']
duration_columns = ['Administrative_Duration', 'Informational_Duration', 'ProductRelated_Duration']

# Compute the correlation matrix for the duration variables
correlation_matrix = returning_customers_data[duration_columns].corr()

# Remove self-correlations and find the strongest correlation between different variables
correlation_matrix_no_self = correlation_matrix.where(~np.eye(correlation_matrix.shape[0], dtype=bool))
strongest_non_self_pair = correlation_matrix_no_self.abs().unstack().sort_values(ascending=False).drop_duplicates().idxmax()

# Updated result in the desired dictionary format
top_correlation = {
    "pair": strongest_non_self_pair,
    "correlation": round(correlation_matrix_no_self.unstack()[strongest_non_self_pair], 3)
}
top_correlation

```

::: {.output .execute_result execution_count="10"}
    {'pair': ('Administrative_Duration', 'ProductRelated_Duration'),
     'correlation': 0.417}
:::
:::

::: {#5848e0c0-b8b3-4cf7-a679-80d625502577 .cell .code execution_count="11" executionCancelledAt="null" executionTime="887" lastExecutedAt="1726297885319" lastExecutedByKernel="9f6b6048-0dda-4343-b1c8-b9c92041cc74" lastScheduledRunId="null" lastSuccessfullyExecutedCode="from scipy.stats import binom

# Improved purchase rate for returning customers (15% increase)
current_rate = customer_stats.loc['Returning_Customer', 'Purchase_Rate']
improved_rate = current_rate + 0.15 * current_rate

# Number of trials and the number of successes needed
n_sessions = 500
n_sales_needed = 100

# Calculate the probability of achieving at least 100 sales
prob_at_least_100_sales = 1 - binom.cdf(n_sales_needed - 1, n_sessions, improved_rate)

# Plotting the binomial distribution if requested
import matplotlib.pyplot as plt

x = range(0, n_sessions+1)
y = binom.pmf(x, n_sessions, improved_rate)
plt.figure(figsize=(10, 5))
plt.bar(x, y, color='blue')
plt.title('Binomial Distribution of Sales (Improved Rate)')
plt.xlabel('Number of Sales')
plt.ylabel('Probability')
plt.axvline(x=n_sales_needed, color='red', linestyle='--', label=f'At least {n_sales_needed} sales')
plt.legend()
plt.grid(True)
plt.show()

prob_at_least_100_sales
"}
``` python
from scipy.stats import binom

# Improved purchase rate for returning customers (15% increase)
current_rate = customer_stats.loc['Returning_Customer', 'Purchase_Rate']
improved_rate = current_rate + 0.15 * current_rate

# Number of trials and the number of successes needed
n_sessions = 500
n_sales_needed = 100

# Calculate the probability of achieving at least 100 sales
prob_at_least_100_sales = 1 - binom.cdf(n_sales_needed - 1, n_sessions, improved_rate)

# Plotting the binomial distribution if requested
import matplotlib.pyplot as plt

x = range(0, n_sessions+1)
y = binom.pmf(x, n_sessions, improved_rate)
plt.figure(figsize=(10, 5))
plt.bar(x, y, color='blue')
plt.title('Binomial Distribution of Sales (Improved Rate)')
plt.xlabel('Number of Sales')
plt.ylabel('Probability')
plt.axvline(x=n_sales_needed, color='red', linestyle='--', label=f'At least {n_sales_needed} sales')
plt.legend()
plt.grid(True)
plt.show()

prob_at_least_100_sales
```

::: {.output .display_data}
![](vertopal_e59786fecbb14ec4b5b6cbe53f7720bd/df8909ca995ffb2f3b0c81ca7863fc4babbc0166.png){height="472"
width="862"}
:::

::: {.output .execute_result execution_count="11"}
    0.9190464150313483
:::
:::
